name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions: {}

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        # Temporarily disable cache due to service issues
        # with:
        #   enable-cache: true

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run full CI pipeline
        run: uv run poe ci

  release:
    needs: test
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      id-token: write
      contents: write
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        # Temporarily disable cache due to service issues
        # with:
        #   enable-cache: true

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v9.15.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          root_options: -vv

      - name: Build client package
        if: steps.release.outputs.released == 'true'
        run: |
          uv build
          mkdir -p client-dist
          cp dist/*.whl dist/*.tar.gz client-dist/

      - name: Update MCP server dependency and build
        if: steps.release.outputs.released == 'true'
        run: |
          # Update MCP server to depend on the new client version
          CLIENT_VERSION="${{ steps.release.outputs.version }}"
          echo "Updating MCP server to depend on client version $CLIENT_VERSION"

          # Install toml for Python
          uv run pip install toml

          # Create update script
          cat > update_mcp_version.py << 'EOF'
          import toml
          import sys

          client_version = sys.argv[1]

          # Read current pyproject.toml
          with open('stocktrim_mcp_server/pyproject.toml', 'r') as f:
              data = toml.load(f)

          # Update client dependency to specific version
          data['dependencies'][0] = f'stocktrim-openapi-client=={client_version}'

          # Remove workspace source override for PyPI release
          if 'tool' in data and 'uv' in data['tool'] and 'sources' in data['tool']['uv']:
              if 'stocktrim-openapi-client' in data['tool']['uv']['sources']:
                  del data['tool']['uv']['sources']['stocktrim-openapi-client']
                  print('Removed workspace source override for PyPI release')

          # Bump MCP server patch version
          current_version = data['project']['version']
          major, minor, patch = map(int, current_version.split('.'))
          new_version = f'{major}.{minor}.{patch + 1}'
          data['project']['version'] = new_version

          print(f'Updated MCP server to version {new_version} with client dependency stocktrim-openapi-client=={client_version}')

          # Write back
          with open('stocktrim_mcp_server/pyproject.toml', 'w') as f:
              toml.dump(data, f)

          print(f'::set-output name=mcp_version::{new_version}')
          EOF

          # Run the update script
          uv run python update_mcp_version.py "$CLIENT_VERSION"

          # Clean and build MCP server
          rm -rf dist/
          uv build --package stocktrim-mcp-server
          mkdir -p mcp-dist
          cp dist/*.whl dist/*.tar.gz mcp-dist/

      - name: Upload client artifacts
        if: steps.release.outputs.released == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dist-client
          path: client-dist/

      - name: Upload MCP server artifacts
        if: steps.release.outputs.released == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dist-mcp
          path: mcp-dist/

  publish-client:
    name: Publish Client to PyPI
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    environment:
      name: pypi-client
      url: https://pypi.org/p/stocktrim-openapi-client
    permissions:
      id-token: write
    steps:
      - name: Download client artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-client
          path: dist/

      - name: Publish client to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true

  publish-mcp:
    name: Publish MCP Server to PyPI
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    environment:
      name: pypi-mcp
      url: https://pypi.org/p/stocktrim-mcp-server
    permissions:
      id-token: write
    steps:
      - name: Download MCP server artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-mcp
          path: dist/

      - name: Publish MCP server to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true
